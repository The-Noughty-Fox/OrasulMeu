//
// CategoryAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CategoryAPI {

    /**
     
     
     - parameter categoryDto: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func createCategory(categoryDto: CategoryDto) async throws {
        return try await createCategoryWithRequestBuilder(categoryDto: categoryDto).execute().body
    }

    /**
     
     - POST /category
     - parameter categoryDto: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func createCategoryWithRequestBuilder(categoryDto: CategoryDto) -> RequestBuilder<Void> {
        let localVariablePath = "/category"
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: categoryDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = APIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     
     
     - parameter id: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func deleteCategory(id: Double) async throws {
        return try await deleteCategoryWithRequestBuilder(id: id).execute().body
    }

    /**
     
     - DELETE /category/{id}
     - parameter id: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteCategoryWithRequestBuilder(id: Double) -> RequestBuilder<Void> {
        var localVariablePath = "/category/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = APIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     
     
     - parameter id: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getCategory(id: Double) async throws {
        return try await getCategoryWithRequestBuilder(id: id).execute().body
    }

    /**
     
     - GET /category/{id}
     - parameter id: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func getCategoryWithRequestBuilder(id: Double) -> RequestBuilder<Void> {
        var localVariablePath = "/category/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = APIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     
     
     - parameter sortType: (query)  (optional)
     - parameter page: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)
     - parameter sortBy: (query)  (optional)
     - parameter searchBy: (query)  (optional)
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getManyCategories(sortType: String? = nil, page: Double? = nil, limit: Double? = nil, sortBy: [String]? = nil, searchBy: String? = nil) async throws {
        return try await getManyCategoriesWithRequestBuilder(sortType: sortType, page: page, limit: limit, sortBy: sortBy, searchBy: searchBy).execute().body
    }

    /**
     
     - GET /category
     - parameter sortType: (query)  (optional)
     - parameter page: (query)  (optional, default to 0)
     - parameter limit: (query)  (optional, default to 10)
     - parameter sortBy: (query)  (optional)
     - parameter searchBy: (query)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func getManyCategoriesWithRequestBuilder(sortType: String? = nil, page: Double? = nil, limit: Double? = nil, sortBy: [String]? = nil, searchBy: String? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/category"
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "sortType": (wrappedValue: sortType?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "sortBy": (wrappedValue: sortBy?.encodeToJSON(), isExplode: true),
            "searchBy": (wrappedValue: searchBy?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = APIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     
     
     - parameter categoryDto: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func updateCategory(categoryDto: CategoryDto) async throws {
        return try await updateCategoryWithRequestBuilder(categoryDto: categoryDto).execute().body
    }

    /**
     
     - PATCH /category
     - parameter categoryDto: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func updateCategoryWithRequestBuilder(categoryDto: CategoryDto) -> RequestBuilder<Void> {
        let localVariablePath = "/category"
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: categoryDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = APIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
