//
// BaseUserDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct BaseUserDto: Codable, JSONEncodable, Hashable {

    public enum Gender: String, Codable, CaseIterable {
        case all = "All"
        case other = "Other"
        case male = "Male"
        case female = "Female"
        case transgender = "Transgender"
        case bigender = "Bigender"
    }
    public var id: Double
    public var firstname: String
    public var lastname: String
    public var email: String
    public var gender: Gender
    public var googleToken: String?
    public var facebookToken: String?
    public var appleToken: String?

    public init(id: Double, firstname: String, lastname: String, email: String, gender: Gender, googleToken: String? = nil, facebookToken: String? = nil, appleToken: String? = nil) {
        self.id = id
        self.firstname = firstname
        self.lastname = lastname
        self.email = email
        self.gender = gender
        self.googleToken = googleToken
        self.facebookToken = facebookToken
        self.appleToken = appleToken
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case firstname
        case lastname
        case email
        case gender
        case googleToken = "google_token"
        case facebookToken = "facebook_token"
        case appleToken = "apple_token"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(firstname, forKey: .firstname)
        try container.encode(lastname, forKey: .lastname)
        try container.encode(email, forKey: .email)
        try container.encode(gender, forKey: .gender)
        try container.encodeIfPresent(googleToken, forKey: .googleToken)
        try container.encodeIfPresent(facebookToken, forKey: .facebookToken)
        try container.encodeIfPresent(appleToken, forKey: .appleToken)
    }
}

