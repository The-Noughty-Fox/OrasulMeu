openapi: 3.0.0
paths:
  /echo:
    get:
      operationId: get-echo
      summary: ""
      parameters: []
      responses:
        default:
          description: ""
          content:
            application/json:
              schema:
                type: string
      tags:
        - echo
  /users:
    post:
      operationId: create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateDto"
      responses:
        "201":
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "400":
          description: Bad Request. No token provided
        "409":
          description: Conflict. Invalid input data
        "500":
          description: Internal Server Error
      tags: &a1
        - users
    get:
      operationId: findAll
      parameters: []
      responses:
        "200":
          description: Users found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDto"
        "500":
          description: Internal Server Error
      tags: *a1
    patch:
      operationId: update
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateDto"
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "500":
          description: Internal Server Error
      tags: *a1
  /users/profile/{id}:
    get:
      operationId: get-user-profile
      summary: ""
      parameters:
        - name: id
          required: true
          in: path
          description: User id
          schema:
            type: number
      responses:
        "200":
          description: User profile found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfileDto"
        "404":
          description: User profile not found
      tags: *a1
  /users/{id}:
    get:
      operationId: findOne
      parameters:
        - name: id
          required: true
          in: path
          description: User id
          schema:
            type: number
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "404":
          description: User not found
      tags: *a1
  /auth/test/{id}:
    post:
      operationId: login-test-user
      summary: ""
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: integer
      responses:
        "201":
          description: The user has been successfully authenticated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
      tags: &a2
        - auth
  /auth/apple:
    post:
      operationId: auth-with-apple
      summary: ""
      tags: *a2
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppleApiBody"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "401":
          description: ""
  /auth/google:
    post:
      operationId: auth-with-google
      summary: ""
      tags: *a2
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiBodyWithToken"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "401":
          description: ""
  /auth/facebook:
    post:
      operationId: auth-with-facebook
      summary: ""
      tags: *a2
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiBodyWithToken"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "401":
          description: ""
  /posts:
    post:
      operationId: create-post
      summary: ""
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePostDto"
      responses:
        "201":
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostDto"
        "500":
          description: Internal Server Error
      tags: &a3
        - posts
    get:
      operationId: get-all-posts
      summary: ""
      parameters:
        - name: page
          required: true
          in: query
          schema:
            default: 1
            type: integer
        - name: limit
          required: true
          in: query
          schema:
            default: 10
            type: integer
        - name: page
          in: query
          required: true
          schema:
            default: 1
            type: integer
        - name: limit
          in: query
          required: true
          schema:
            default: 10
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/PostDto"
                  total:
                    type: number
                  page:
                    type: number
                  limit:
                    type: number
        "404":
          description: Not found
        "500":
          description: Internal Server Error
      tags: *a3
  /posts/reaction:
    get:
      operationId: get-all-posts-ordered-by-reactions-count
      summary: ""
      parameters:
        - name: page
          required: true
          in: query
          schema:
            default: 1
            type: integer
        - name: limit
          required: true
          in: query
          schema:
            default: 10
            type: integer
        - name: page
          in: query
          required: true
          schema:
            default: 1
            type: integer
        - name: limit
          in: query
          required: true
          schema:
            default: 10
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/PostDto"
                  total:
                    type: number
                  page:
                    type: number
                  limit:
                    type: number
        "404":
          description: Not found
        "500":
          description: Internal Server Error
      tags: *a3
  /posts/my:
    get:
      operationId: get-my-posts
      summary: ""
      parameters:
        - name: page
          required: true
          in: query
          schema:
            default: 1
            type: integer
        - name: limit
          required: true
          in: query
          schema:
            default: 10
            type: integer
        - name: page
          in: query
          required: true
          schema:
            default: 1
            type: integer
        - name: limit
          in: query
          required: true
          schema:
            default: 10
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/PostDto"
                  total:
                    type: number
                  page:
                    type: number
                  limit:
                    type: number
        "404":
          description: Not found
        "500":
          description: Internal Server Error
      tags: *a3
  /posts/{id}:
    get:
      operationId: get-post
      summary: ""
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostDto"
        "404":
          description: Not found
        "500":
          description: Internal Server Error
      tags: *a3
    patch:
      operationId: update-post
      summary: ""
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePostDto"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostDto"
        "404":
          description: Post not found or unable to edit post
        "500":
          description: Internal Server Error
      tags: *a3
    delete:
      operationId: delete-post
      summary: ""
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: integer
      responses:
        "200":
          description: ""
        "404":
          description: Post not found or unable to delete post
        "500":
          description: Internal Server Error
      tags: *a3
  /posts/{id}/react:
    post:
      operationId: react-to-post
      summary: ""
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReactToPostDto"
      responses:
        "404":
          description: Post not found
        "500":
          description: Internal Server Error
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostDto"
      tags: *a3
    delete:
      operationId: retieve-reaction-to-post
      summary: ""
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: integer
      responses:
        "404":
          description: Post not found
        "500":
          description: Internal Server Error
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostDto"
      tags: *a3
  /posts/{id}/media:
    post:
      operationId: upload-post-media
      summary: ""
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/MediaDto"
      responses:
        "404":
          description: Post not found
        "500":
          description: Internal Server Error
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostDto"
      tags: *a3
  /media:
    post:
      operationId: upload
      parameters: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/MediaSingleDto"
      responses:
        "200":
          description: Media file uploaded successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MediaSupabaseDto"
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      tags: &a4
        - media
  /media/files:
    post:
      operationId: uploadFiles
      parameters: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/MediaDto"
      responses:
        "200":
          description: Media files uploaded successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MediaSupabaseDto"
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      tags: *a4
  /comments:
    post:
      operationId: create-comment
      summary: ""
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCommentDto"
      responses:
        "201":
          description: ""
      tags: &a5
        - comments
    get:
      operationId: get-comments
      summary: ""
      parameters: []
      responses:
        "200":
          description: ""
      tags: *a5
  /comments/{id}:
    get:
      operationId: get-comment
      summary: ""
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a5
    patch:
      operationId: update-comment
      summary: ""
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCommentDto"
      responses:
        "200":
          description: ""
      tags: *a5
    delete:
      operationId: delete-comment
      summary: ""
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a5
info:
  title: Orasul Meu
  description: Orasul Meu Swagger API
  version: "1.0"
  contact: {}
tags:
  - name: orasul_meu
    description: ""
servers: []
components:
  schemas:
    UserCreateDto:
      type: object
      properties:
        email:
          type: string
        username:
          type: string
        appleToken:
          type: string
        googleToken:
          type: string
        facebookToken:
          type: string
        socialProfilePictureUrl:
          type: string
      required:
        - email
        - username
    UserDto:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        username:
          type: string
        socialProfilePictureUrl:
          type: string
      required:
        - id
        - email
        - username
    UserProfileDto:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        username:
          type: string
        socialProfilePictureUrl:
          type: string
        reactionsCount:
          type: integer
        publicationsCount:
          type: integer
      required:
        - id
        - email
        - username
        - reactionsCount
        - publicationsCount
    UserUpdateDto:
      type: object
      properties:
        email:
          type: string
        username:
          type: string
        socialProfilePictureUrl:
          type: string
    AppleApiBody:
      type: object
      properties:
        authorizationCode:
          type: string
      required:
        - authorizationCode
    ApiBodyWithToken:
      type: object
      properties:
        token:
          type: string
      required:
        - token
    PointDto:
      type: object
      properties:
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
      required:
        - latitude
        - longitude
    CreatePostDto:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        locationAddress:
          type: string
        location:
          $ref: "#/components/schemas/PointDto"
      required:
        - title
    PostReactionsDto:
      type: object
      properties:
        dislike:
          type: integer
        like:
          type: integer
        userReaction:
          type: string
          enum:
            - like
            - dislike
      required:
        - dislike
        - like
    CommentDto:
      type: object
      properties: {}
    MediaSupabaseDto:
      type: object
      properties:
        id:
          type: integer
        type:
          type: string
          enum:
            - image
            - video
        url:
          type: string
          description: public url of media file
        bucketPath:
          type: string
          description: path to the media file from the bucket
        fileName:
          type: string
          description: name of the file
      required:
        - id
        - type
        - url
        - bucketPath
        - fileName
    PostDto:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        content:
          type: string
        author:
          $ref: "#/components/schemas/UserDto"
        reactions:
          $ref: "#/components/schemas/PostReactionsDto"
        comments:
          $ref: "#/components/schemas/CommentDto"
        media:
          type: array
          items:
            $ref: "#/components/schemas/MediaSupabaseDto"
        locationAddress:
          type: string
        location:
          $ref: "#/components/schemas/PointDto"
      required:
        - id
        - title
        - content
        - author
        - reactions
        - comments
        - media
        - locationAddress
        - location
    UpdatePostDto:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        locationAddress:
          type: string
        location:
          $ref: "#/components/schemas/PointDto"
    ReactToPostDto:
      type: object
      properties:
        react:
          type: string
          enum:
            - like
            - dislike
      required:
        - react
    MediaDto:
      type: object
      properties:
        files:
          type: array
          items:
            type: string
            format: binary
      required:
        - files
    MediaSingleDto:
      type: object
      properties:
        file:
          type: string
          format: binary
      required:
        - file
    CreateCommentDto:
      type: object
      properties: {}
    UpdateCommentDto:
      type: object
      properties: {}
