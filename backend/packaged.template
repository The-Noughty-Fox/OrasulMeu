AWSTemplateFormatVersion: '2010-09-09'
Description: Template for Orasul Meu API
Parameters:
  DomainName:
    Type: String
    Description: Domain name for the load balancer
  HostedZoneID:
    Type: String
    Description: Route53 Hosted Zone ID to register the domain name
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC that allows instances access to the Internet
  SubnetId1:
    Type: AWS::EC2::Subnet::Id
    Description: A subnet in selected VPC
  SubnetId2:
    Type: AWS::EC2::Subnet::Id
    Description: A subnet in selected VPC
  TaskImage:
    Type: String
    Description: Docker container image URL
  EnvFileARN:
    Type: String
    Description: The ARN of the .env file from an S3 bucket
  ContainerPort:
    Type: Number
    Description: Docker container port to map the traffic port
  CreateLogsGroup:
    Type: String
    Description: Create CloudWatch logs group
    AllowedValues:
    - true
    - false
    Default: false
  LogsGroupName:
    Type: String
    Description: CloudWatch logs group name for ECS tasks
Conditions:
  ShouldCreateLogsGroup:
    Fn::Equals:
    - true
    - Ref: CreateLogsGroup
Resources:
  ACMCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName:
        Ref: DomainName
      ValidationMethod: DNS
  RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId:
        Ref: HostedZoneID
      RecordSets:
      - Name:
          Ref: DomainName
        Type: A
        AliasTarget:
          DNSName:
            Fn::GetAtt:
            - LoadBalancer
            - DNSName
          HostedZoneId:
            Fn::GetAtt:
            - LoadBalancer
            - CanonicalHostedZoneID
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName:
        Fn::Sub: ${AWS::StackName}-ecs-cluster
  Service:
    Type: AWS::ECS::Service
    DependsOn:
    - LoadBalancerHTTPListener
    - LoadBalancerHTTPSListener
    Properties:
      Cluster:
        Ref: Cluster
      ServiceName:
        Fn::Sub: ${AWS::StackName}-ecs-service
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName:
          Fn::Sub: ${AWS::StackName}-ecs-task
        ContainerPort:
          Ref: ContainerPort
        TargetGroupArn:
          Ref: LoadBalancerTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: TaskSecurityGroup
          Subnets:
          - Ref: SubnetId1
          - Ref: SubnetId2
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DeploymentController:
        Type: ECS
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-task-role
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs-tasks.amazonaws.com
          Action:
          - sts:AssumeRole
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-task-execution-role
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs-tasks.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
  TaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: ${AWS::StackName}-ecs-containers-security-group
      GroupDescription: Security Group for Orasul Meu API Containers
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - SourceSecurityGroupId:
          Ref: LoadBalancerSecurityGroup
        IpProtocol: tcp
        FromPort:
          Ref: ContainerPort
        ToPort:
          Ref: ContainerPort
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
  TaskLogsGroup:
    Type: AWS::Logs::LogGroup
    Condition: ShouldCreateLogsGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Ref: LogsGroupName
      RetentionInDays: 30
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-load-balancer
      Type: application
      IpAddressType: ipv4
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: 30
      Subnets:
      - Ref: SubnetId1
      - Ref: SubnetId2
      SecurityGroups:
      - Ref: LoadBalancerSecurityGroup
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: ${AWS::StackName}-ecs-load-balancer-security-group
      GroupDescription: Security Group for Orasul Meu API Load Balancer
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
  LoadBalancerHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: redirect
        RedirectConfig:
          StatusCode: HTTP_301
          Port: 443
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 80
      Protocol: HTTP
  LoadBalancerHTTPListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: redirect
        RedirectConfig:
          StatusCode: HTTP_301
          Port: 443
      Conditions:
      - Field: path-pattern
        Values:
        - /
      ListenerArn:
        Ref: LoadBalancerHTTPListener
      Priority: 1
  LoadBalancerHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        ForwardConfig:
          TargetGroups:
          - TargetGroupArn:
              Ref: LoadBalancerTargetGroup
            Weight: 1
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
      - CertificateArn:
          Ref: ACMCertificate
  LoadBalancerHTTPSListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        ForwardConfig:
          TargetGroups:
          - TargetGroupArn:
              Ref: LoadBalancerTargetGroup
            Weight: 1
      Conditions:
      - Field: path-pattern
        Values:
        - /
      ListenerArn:
        Ref: LoadBalancerHTTPSListener
      Priority: 2
  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /health
      HealthCheckPort:
        Ref: ContainerPort
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name:
        Fn::Sub: ${AWS::StackName}-tg
      Port:
        Ref: ContainerPort
      Protocol: HTTP
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId:
        Ref: VpcId
  ServiceScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-auto-scaling-role
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs-tasks.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole
  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn:
    - Cluster
    - Service
    Properties:
      MinCapacity: 1
      MaxCapacity: 3
      ResourceId:
        Fn::Sub: service/${Cluster}/${Service.Name}
      RoleARN:
        Fn::GetAtt:
        - ServiceScalingRole
        - Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  ServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName:
        Fn::Sub: ${AWS::StackName}-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: ServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        TargetValue: 80
Outputs:
  ClusterName:
    Value:
      Fn::Sub: ${AWS::StackName}-ecs-cluster
  ServiceName:
    Value:
      Fn::Sub: ${AWS::StackName}-ecs-service
  LoadBalancerDNS:
    Value:
      Fn::GetAtt:
      - LoadBalancer
      - DNSName
