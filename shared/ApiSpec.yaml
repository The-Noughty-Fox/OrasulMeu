openapi: 3.0.0
paths:
  "/category/{id}":
    get:
      operationId: get-category
      summary: ""
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: &a1
        - category
    delete:
      operationId: delete-category
      summary: ""
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: *a1
  /category:
    get:
      operationId: get-many-categories
      summary: ""
      parameters:
        - name: sortType
          required: false
          in: query
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            default: 0
            type: number
        - name: limit
          required: false
          in: query
          schema:
            default: 10
            type: number
        - name: sortBy
          required: false
          in: query
          schema:
            type: array
            items:
              type: string
        - name: searchBy
          required: false
          in: query
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a1
    post:
      operationId: create-category
      summary: ""
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryDto"
      responses:
        "201":
          description: ""
      tags: *a1
    patch:
      operationId: update-category
      summary: ""
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryDto"
      responses:
        "200":
          description: ""
      tags: *a1
  /sub-category:
    post:
      operationId: create-subcategory
      summary: ""
      parameters: []
      responses:
        "201":
          description: ""
      tags: &a2
        - sub-category
    get:
      operationId: get-subcategory
      summary: ""
      parameters: []
      responses:
        "200":
          description: ""
      tags: *a2
  "/user/{id}":
    get:
      operationId: get-user
      summary: ""
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: The user has been successfully authenticated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
      tags: &a3
        - user
    delete:
      operationId: delete-user
      summary: ""
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: *a3
  /user:
    get:
      operationId: get-many-users
      summary: ""
      parameters:
        - name: sortType
          required: false
          in: query
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            default: 0
            type: number
        - name: limit
          required: false
          in: query
          schema:
            default: 10
            type: number
        - name: sortBy
          required: false
          in: query
          schema:
            type: array
            items:
              type: string
        - name: searchBy
          required: false
          in: query
          schema:
            type: string
      responses:
        default:
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDto"
      tags: *a3
    post:
      operationId: create-user
      summary: ""
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDto"
      responses:
        "201":
          description: ""
      tags: *a3
    patch:
      operationId: update-user
      summary: ""
      parameters: []
      requestBody:
        required: true
        description: User model for update
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateDto"
      responses:
        "200":
          description: The user has been successfully updated.
      tags: *a3
  "/activity/{id}":
    get:
      operationId: get-activity
      summary: ""
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: &a4
        - activity
    delete:
      operationId: delete-activity
      summary: ""
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: *a4
  /activity:
    get:
      operationId: get-many-activities
      summary: ""
      parameters:
        - name: sortType
          required: false
          in: query
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            default: 0
            type: number
        - name: limit
          required: false
          in: query
          schema:
            default: 10
            type: number
        - name: sortBy
          required: false
          in: query
          schema:
            type: array
            items:
              type: string
        - name: searchBy
          required: false
          in: query
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a4
    post:
      operationId: create-activity
      summary: ""
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivityDto"
      responses:
        "201":
          description: ""
      tags: *a4
    patch:
      operationId: update-activity
      summary: ""
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivityDto"
      responses:
        "200":
          description: ""
      tags: *a4
  /auth/apple:
    post:
      operationId: authenticateApple
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/appleToken"
      responses:
        "201":
          description: The user has been successfully authenticated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseUserDto"
      tags: &a5
        - auth
  /auth/google:
    post:
      operationId: authenticateGoogle
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/token"
      responses:
        "201":
          description: The user has been successfully authenticated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseUserDto"
      tags: *a5
  /auth/facebook:
    post:
      operationId: authenticateWithFacebookPo
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/token"
      responses:
        "201":
          description: The user has been successfully authenticated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseUserDto"
      tags: *a5
info:
  title: Papai
  description: Papai API description
  version: "1.0"
  contact: {}
tags:
  - name: papai
    description: ""
servers:
  - url: localhost:8080
components:
  schemas:
    CategoryDto:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        description:
          type: string
      required:
        - id
        - name
        - description
    UserDto:
      type: object
      properties:
        id:
          type: number
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        gender:
          type: string
          enum: &a6
            - All
            - Other
            - Male
            - Female
            - Transgender
            - Bigender
        google_token:
          type: string
        facebook_token:
          type: string
        apple_token:
          type: string
        activities:
          type: array
          items:
            type: string
        media:
          type: array
          items:
            type: string
        friends:
          type: array
          items:
            type: string
        interests:
          type: array
          items:
            type: string
      required:
        - id
        - firstname
        - lastname
        - email
        - gender
        - activities
        - media
        - friends
        - interests
    UserUpdateDto:
      type: object
      properties:
        id:
          type: number
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        gender:
          type: string
          enum: *a6
        google_token:
          type: string
        facebook_token:
          type: string
        apple_token:
          type: string
        birthday:
          format: date-time
          type: string
        bio:
          type: string
        public:
          type: boolean
        subCategoryIds:
          type: array
          items:
            type: number
        location:
          type: string
      required:
        - id
        - firstname
        - lastname
        - email
        - gender
        - birthday
        - bio
        - public
        - subCategoryIds
        - location
    ActivityDto:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        createdBy:
          $ref: "#/components/schemas/UserDto"
        date:
          format: date-time
          type: string
        maxParticipants:
          type: number
        minParticipants:
          type: number
        participants:
          type: array
          items:
            type: string
      required:
        - id
        - name
        - createdBy
        - date
        - maxParticipants
        - minParticipants
        - participants
    appleToken:
      type: object
      properties:
        authorizationCode:
          type: string
      required:
        - authorizationCode
    BaseUserDto:
      type: object
      properties:
        id:
          type: number
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        gender:
          type: string
          enum: *a6
        google_token:
          type: string
        facebook_token:
          type: string
        apple_token:
          type: string
      required:
        - id
        - firstname
        - lastname
        - email
        - gender
    token:
      type: object
      properties:
        token:
          type: string
      required:
        - token
